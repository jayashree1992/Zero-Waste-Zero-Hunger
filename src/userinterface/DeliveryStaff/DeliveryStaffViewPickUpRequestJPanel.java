/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryStaff;

import Business.Employee.DeliveryStaff;
import Business.Enterprise.DeliveryEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Network.Network;
import Business.Organization.DeliveryManagerOrganization;
import Business.Organization.NGOStaffOrganization;
import Business.Organization.Organization;

import Business.UserAccount.UserAccount;
import Business.Utility.EmailSender;
import Business.WorkQueue.BillingRequest;
import Business.WorkQueue.DeliveryRequest;

import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayashree
 */
public class DeliveryStaffViewPickUpRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DeliveryStaffViewPickUpRequestJPanel
     */
    JPanel userProcessContainer;
    UserAccount deliveryStaff;
    Enterprise enterprise;
    Network network;

    public DeliveryStaffViewPickUpRequestJPanel(JPanel userProcessContainer, UserAccount deliveryStaff, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.deliveryStaff = deliveryStaff;
        this.enterprise = enterprise;
        this.network = network;
        populateTable();
        populateDeliveryDropOffTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        viewDeliveryRequest = new javax.swing.JTable();
        pickUpButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        dropOffButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        deliveryDropOffTable = new javax.swing.JTable();
        costField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 140));

        viewDeliveryRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Request Date", "Donor", "Pick Up Location", "NGO", "Drop Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewDeliveryRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewDeliveryRequestMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(viewDeliveryRequest);

        pickUpButton.setText("Start Pick Up");
        pickUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickUpButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Details");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dropOffButton.setText("Confirm Drop Off");
        dropOffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropOffButtonActionPerformed(evt);
            }
        });

        deliveryDropOffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Donor", "Pick Up Location", "NGO", "Drop Location", "DropOff Time", "Cost ($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deliveryDropOffTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deliveryDropOffTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(deliveryDropOffTable);

        jLabel2.setText("Delivery Cost:");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel5.setText("Delivery Staff Work Area - Pick Up Requests");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel4.setText("New Pick Up Requests");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel6.setText("Completed / In Process Deliveries");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pickUpButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(dropOffButton))
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(0, 62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel5)
                .addGap(36, 36, 36)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pickUpButton)
                    .addComponent(jButton2))
                .addGap(36, 36, 36)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropOffButton)
                    .addComponent(costField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addContainerGap(99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewDeliveryRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewDeliveryRequestMouseClicked
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) viewDeliveryRequest.getModel();
        int selectedRowIndex = viewDeliveryRequest.getSelectedRow();
        DeliveryRequest pr = (DeliveryRequest) dtm.getValueAt(selectedRowIndex, 0);

        populateFoodItemListTable(pr);
    }//GEN-LAST:event_viewDeliveryRequestMouseClicked

    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) viewDeliveryRequest.getModel();
        dtm.setRowCount(0);

        // System.out.print(organization);
        for (WorkRequest wr : deliveryStaff.getWorkQueue().getWorkRequestList()) {

            DeliveryRequest dr = (DeliveryRequest) wr;
            if (dr.getPickupTime() == null) {
                Object row[] = new Object[6];
                row[0] = wr;
                row[1] = wr.getRequestDate();
                row[2] = dr.getPickupRequest().getDonorEnterprise();
                row[3] = dr.getPickupLocation();
                row[4] = dr.getNgoEnterprise();
                row[5] = dr.getDropOffLocation();
                dtm.addRow(row);
            }
        }

    }

    private void populateFoodItemListTable(DeliveryRequest pr) {

    }


    private void pickUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickUpButtonActionPerformed
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) viewDeliveryRequest.getModel();

        int selectedRowIndex = viewDeliveryRequest.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request");
            return;
        }

        WorkRequest wr = (WorkRequest) dtm.getValueAt(selectedRowIndex, 0);

        DeliveryRequest dr = (DeliveryRequest) wr;
        dr.getPickupRequest().setDeliveryPerson(deliveryStaff);
        wr.setResolveDate(new Date());
        dr.setPickupTime(new Date());
        dr.setStatus("Pick up Started");
        dr.getPickupRequest().setStatus("Pick up Started");
        dr.setDeliveryEnterprise(enterprise.getName());
        populateTable();
        populateDeliveryDropOffTable();
        EmailSender.sendEmail("patel.jaya@husky.neu.edu", dr.getSender().getEmployee().getName(), "Packet has been picked up by " + deliveryStaff + " from " + dr.getDonorEnterprise());

    }//GEN-LAST:event_pickUpButtonActionPerformed

    private void populateDeliveryDropOffTable() {

        DefaultTableModel dtm = (DefaultTableModel) deliveryDropOffTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : deliveryStaff.getWorkQueue().getWorkRequestList()) {

            DeliveryRequest dr = (DeliveryRequest) wr;
            if (dr.getPickupTime() != null) {
                Object row[] = new Object[7];
                row[0] = dr;
                row[1] = dr.getPickupRequest().getDonorEnterprise();
                row[2] = dr.getPickupLocation();
                row[3] = dr.getNgoEnterprise();
                row[4] = dr.getDropOffLocation();
                row[5] = dr.getPickupTime() == null ? "Pick Up Not yet started" : dr.getPickupTime();
                row[6] = dr.getDropOfTime() == null ? "--" : dr.getCost();
                dtm.addRow(row);
            }
        }

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) viewDeliveryRequest.getModel();
        int selectedRowIndex = viewDeliveryRequest.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to view");
            return;
        }

        DeliveryRequest dr = (DeliveryRequest) dtm.getValueAt(selectedRowIndex, 0);

        DeliveryStaffViewRequestDetailsJPanel deliveryStaffViewRequestDetailsJPanel = new DeliveryStaffViewRequestDetailsJPanel(userProcessContainer, dr);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("DeliveryStaffViewRequestDetailsJPanel", deliveryStaffViewRequestDetailsJPanel);
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    
      private boolean numbersOnly(){
        
        Pattern p = Pattern.compile("^[0-9]*$");
        Matcher m=p.matcher(costField.getText());
        boolean b = m.matches();
        return b;
    }
    private void dropOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropOffButtonActionPerformed
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) deliveryDropOffTable.getModel();
        int selectedRowIndex = deliveryDropOffTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to finish deliver");
            return;
        }

        DeliveryRequest dr = (DeliveryRequest) dtm.getValueAt(selectedRowIndex, 0);
        if (dr.getDropOfTime() != null) {
            JOptionPane.showMessageDialog(null, "Delivery already Completed");
            return;
        }

        
        String price = costField.getText();
        
        if(price.equals("") || price == null){
            JOptionPane.showMessageDialog(null, "Delivery cost cannot be blank");
            return;
        }
   
        if(!numbersOnly()){
            JOptionPane.showMessageDialog(null, "Delivery cost can be in positive numbers only");
            return;
        }
        
         int cost = Integer.parseInt(price);
        
          if(cost<=0){
            JOptionPane.showMessageDialog(null, "Delivery Cost cannot be negative or 0");
            return;
        }
        
       
       
        
        dr.setCost(cost);
        dr.setDropOfTime(new Date());
        dr.setDeliveryTime();
        dr.setStatus("Delivery Completed");
        dr.getPickupRequest().setStatus("Delivery Completed");
        DeliveryStaff ds = (DeliveryStaff) dr.getDeliveryPerson().getEmployee();
        ds.setIsAvailable(true);
        populateDeliveryDropOffTable();

        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {

            if (e instanceof NGOEnterprise) {

                for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {

                    if (o instanceof NGOStaffOrganization) {
                        o.getWorkQueue().getWorkRequestList().add(dr);
                    }
                }

            }

        }

        BillingRequest br = new BillingRequest();
        br.setDeliveryrequest(dr);
        br.setBillPaid(false);
        br.setBillingDate(new Date());
        br.setStatus("Bill Generated");

        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof DeliveryManagerOrganization) {
                o.getWorkQueue().getWorkRequestList().add(br);
            }

        }
        EmailSender.sendEmail("patel.jaya@husky.neu.edu", dr.getSender().getEmployee().getName(), "Delivery Completed");

    }//GEN-LAST:event_dropOffButtonActionPerformed

    private void deliveryDropOffTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliveryDropOffTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryDropOffTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField costField;
    private javax.swing.JTable deliveryDropOffTable;
    private javax.swing.JButton dropOffButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton pickUpButton;
    private javax.swing.JTable viewDeliveryRequest;
    // End of variables declaration//GEN-END:variables
}
