/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGOTestingDepartment;

import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Food.FoodItem;
import Business.Food.FoodList;
import Business.Organization.Organization;
import Business.WorkQueue.TestingRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayashree
 */
public class NGOTestingDepartmentViewTestingRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NGOTestingDepartmentViewTestingRequestsJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private TestingRequest testingRequest;
    private Enterprise enterprise;
    private String testResult;

    public NGOTestingDepartmentViewTestingRequestsJPanel(JPanel userProcessContainer, Organization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        populateTable();
        enableFields(false);
        enableOtherFields(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        foodItemTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        testingTable = new javax.swing.JTable();
        lblHoursToPerish = new javax.swing.JLabel();
        CmbAllTestsPassed = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        lblStorageConditions = new javax.swing.JLabel();
        btnUploadResults = new javax.swing.JButton();
        CmbStorageConditions = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        lblAllTestsPassed = new javax.swing.JLabel();
        dateField = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 140));

        foodItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Quantity", "Quantity in Pounds", "Is Tested", "Best Before"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        foodItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foodItemTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(foodItemTable);

        testingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Received Date", "Requestor", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        testingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(testingTable);

        lblHoursToPerish.setText("Best Before:");

        CmbAllTestsPassed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        CmbAllTestsPassed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CmbAllTestsPassedMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CmbAllTestsPassedMouseClicked(evt);
            }
        });
        CmbAllTestsPassed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmbAllTestsPassedActionPerformed(evt);
            }
        });

        jButton1.setText("Start Testing");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblStorageConditions.setText("Storage Conditions:");

        btnUploadResults.setText("Upload Test Results and move items in inventory");
        btnUploadResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadResultsActionPerformed(evt);
            }
        });

        CmbStorageConditions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Under 40", "Under 30" }));

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lblAllTestsPassed.setText("Tests Passed:");

        dateField.setDateFormatString("MM-dd-yyyy");
        dateField.setMinSelectableDate(new Date());
        dateField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateFieldMouseClicked(evt);
            }
        });
        dateField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateFieldPropertyChange(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel6.setText("NGO Tester Work Area - View Testing Requests");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel8.setText("Testing requests received");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel9.setText("FoodItems in the selected Testing Request");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAllTestsPassed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CmbAllTestsPassed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHoursToPerish)
                                .addGap(18, 18, 18)
                                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStorageConditions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CmbStorageConditions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jButton1))
                    .addComponent(btnUploadResults)
                    .addComponent(jButton3))
                .addContainerGap(256, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAllTestsPassed)
                    .addComponent(CmbAllTestsPassed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblHoursToPerish))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CmbStorageConditions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStorageConditions))
                .addGap(18, 18, 18)
                .addComponent(btnUploadResults)
                .addGap(36, 36, 36)
                .addComponent(jButton3)
                .addContainerGap(25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void foodItemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foodItemTableMouseClicked
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        int selectedIndex = foodItemTable.getSelectedRow();

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to upload results and move to inventory");
            return;
        }

        FoodItem fi = (FoodItem) dtm.getValueAt(selectedIndex, 0);

        if (fi.getTestResult().isTested()) {
            enableFields(false);
            return;
        }

        enableFields(true);

    }//GEN-LAST:event_foodItemTableMouseClicked

        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) testingTable.getModel();
        int selectedIndex = testingTable.getSelectedRow();

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to start testing");
            return;
        }

        TestingRequest tr = (TestingRequest) dtm.getValueAt(selectedIndex, 2);
        testingRequest = tr;
        tr.setStatus("Test in Progress");
        tr.setResolveDate( new Date());
        populateTable();

        populateFoodItemTable(tr);

        enableFields(true);
        enableOtherFields(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnUploadResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadResultsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        int selectedIndex = foodItemTable.getSelectedRow();

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to upload results and move to inventory");
            return;
        }
        
        
        

        FoodItem fi = (FoodItem) dtm.getValueAt(selectedIndex, 0);

        if (fi.getTestResult().isTested()) {
           JOptionPane.showMessageDialog(null, "This item is already tested");
            return;
        }

//        enableFields(true);

        testResult = CmbAllTestsPassed.getSelectedItem().toString();

        if(testResult.equals("Yes")){
            
   
            Calendar c = dateField.getCalendar();
            
            if (c == null) {
                JOptionPane.showMessageDialog(null, "Invalid date");
                return;
            }
            
            Date d = c.getTime();

            if (d == null) {

                JOptionPane.showMessageDialog(null, "Fill out date field");
                return;
            }
            
            String storageConditions = CmbStorageConditions.getSelectedItem().toString();

            if (storageConditions == null || storageConditions.equals("")) {

                JOptionPane.showMessageDialog(null, "Fill out storage conditions field");
                return;
            }
        
        
        
        fi.getTestResult().setBestBefore(d);
        fi.getTestResult().setStorageCondition(storageConditions);
        }else{
              fi.getTestResult().setBestBefore(new Date());
        }
        
        
       

        fi.getTestResult().setTestPassed(testResult == "Yes" ? true : false);
      
        fi.getTestResult().setTested(true);
        boolean allPassed = allPassed();

        

        populateFoodItemTable(testingRequest);

        if (allPassed) {
            dtm.setRowCount(0);
            enableFields(false);
            testingRequest.setStatus("Testing Completed");
            populateTable();

        }

        NGOEnterprise ne = (NGOEnterprise) enterprise;
 
        // clone this food item and add it to the appropriate list
        try {
            FoodItem testedItem = (FoodItem) fi.clone();
            if (testResult.equals("Yes")) {
                ne.getInventory().getEdibleInventory().add(testedItem);
            } else {
                ne.getInventory().getWasteInventory().add(testedItem);
            }
        } catch (CloneNotSupportedException ex) {
            System.out.print("CloneNotSupportedException in NGOTestingDepartmentViewTestingRequestsJPanel");
        }

        enableFields(false);
        enableOtherFields(false);
        
    }//GEN-LAST:event_btnUploadResultsActionPerformed

    private void populateFoodItemTable(TestingRequest tr) {

        DefaultTableModel dtmi = (DefaultTableModel) foodItemTable.getModel();
        dtmi.setRowCount(0);

        for (FoodItem fi : tr.getFoodPackage().getFoodItemList()) {
            Object row[] = new Object[5];
            row[0] = fi;
            row[1] = fi.getQuantity();
            row[2] = FoodList.getFoodInPounds().get(fi.getFoodItemName()) * fi.getQuantity();
            row[3] = fi.getTestResult().isTested() ? "Yes" : "No";
            row[4] = fi.getTestResult().getBestBefore() == null ? "Not yet Tested" : fi.getTestResult().getBestBefore();
            dtmi.addRow(row);
        }
    }

    private void enableFields(boolean b) {
        lblAllTestsPassed.setEnabled(b);
        CmbAllTestsPassed.setEnabled(b);
        btnUploadResults.setEnabled(b);
    }
    
    private void enableOtherFields(boolean b){
        
        lblStorageConditions.setEnabled(b);
        CmbStorageConditions.setEnabled(b);
    
        lblHoursToPerish.setEnabled(b);
        dateField.setEnabled(b);
    }

    private boolean allPassed() {
        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        int selectedIndex = foodItemTable.getSelectedRow();
       

        for (int i = 0; i < dtm.getRowCount(); i++) {

            FoodItem fi = (FoodItem) dtm.getValueAt(i, 0);
            if (!fi.getTestResult().isTested()) {
                return false;
            }

        }

        return true;

    }

    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) testingTable.getModel();

        dtm.setRowCount(0);

        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            TestingRequest tr = (TestingRequest) wr;

            if (!tr.getStatus().equals("Testing Completed")) {
                Object row[] = new Object[3];
                row[0] = tr.getRequestDate();
                row[1] = tr.getSender();
                row[2] = tr;
                dtm.addRow(row);
            }

        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void testingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testingTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_testingTableMouseClicked

    private void dateFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldPropertyChange

    private void dateFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateFieldMouseClicked
        // TODO add your handling code here:
        System.out.println(dateField.getDate());
    }//GEN-LAST:event_dateFieldMouseClicked

    private void CmbAllTestsPassedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CmbAllTestsPassedMouseClicked
        // TODO add your handling code here:
     
        
    }//GEN-LAST:event_CmbAllTestsPassedMouseClicked

    private void CmbAllTestsPassedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CmbAllTestsPassedMouseReleased
        // TODO add your handling code here:
           
       
    }//GEN-LAST:event_CmbAllTestsPassedMouseReleased

    private void CmbAllTestsPassedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmbAllTestsPassedActionPerformed
        // TODO add your handling code here:
         testResult = CmbAllTestsPassed.getSelectedItem().toString();
         if(testResult.equals("Yes")){
          enableOtherFields(true);
          }
         else{
         enableOtherFields(false);
         }
    }//GEN-LAST:event_CmbAllTestsPassedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CmbAllTestsPassed;
    private javax.swing.JComboBox<String> CmbStorageConditions;
    private javax.swing.JButton btnUploadResults;
    private com.toedter.calendar.JDateChooser dateField;
    private javax.swing.JTable foodItemTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAllTestsPassed;
    private javax.swing.JLabel lblHoursToPerish;
    private javax.swing.JLabel lblStorageConditions;
    private javax.swing.JTable testingTable;
    // End of variables declaration//GEN-END:variables
}
