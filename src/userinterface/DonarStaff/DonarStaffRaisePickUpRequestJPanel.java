/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DonarStaff;


//import Business.Food.FoodList;

import Business.Enterprise.Enterprise;
import Business.Food.FoodItem;
import Business.Food.FoodList;
import Business.Organization.DonarManagerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FoodPickUpRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayashree
 */
public class DonarStaffRaisePickUpRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DonarStaffRaiseCollectionRequestJPanel
     */
    
    private JPanel userProcessContainer;
    private UserAccount donarStaffAccount;
    private Enterprise donorEnterprise;

    public DonarStaffRaisePickUpRequestJPanel(JPanel userProcessContainer, UserAccount donarStaffAccount, Enterprise donorEnterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.donarStaffAccount = donarStaffAccount;
        this.donorEnterprise = donorEnterprise;
        populateFoodItemComboBox();
        
    }
    
    private void populateFoodItemComboBox(){
        foodItemName.removeAllItems();
 
        for (String s : FoodList.getFoodInPounds().keySet()){
            foodItemName.addItem(s);
            
        }
        
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        foodQuantity = new javax.swing.JSpinner();
        btnRaiseCollectionRequest = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        addFoodItem = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        foodItemTable = new javax.swing.JTable();
        foodItemName = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setBackground(new java.awt.Color(255, 228, 140));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Donar Staff Work Area - Raise Pick Up Request");

        jLabel2.setText("Food Item Name:");

        jLabel3.setText("Quantity:");

        btnRaiseCollectionRequest.setText("Raise Pick Up Request");
        btnRaiseCollectionRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRaiseCollectionRequestActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        addFoodItem.setText("Add Food Item");
        addFoodItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodItemActionPerformed(evt);
            }
        });

        foodItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(foodItemTable);

        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon("/Users/jayashree/Desktop/Aed Images/flat-belly-foods.gif")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRaiseCollectionRequest))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addFoodItem)
                            .addComponent(foodQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(foodItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(1364, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(foodItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(foodQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addFoodItem)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnRaiseCollectionRequest))
                .addGap(49, 49, 49)
                .addComponent(btnBack)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

      
    private void btnRaiseCollectionRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRaiseCollectionRequestActionPerformed
        // TODO add your handling code here:
        
         

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();

        if (dtm.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No food items selected for the request to be raised");
            return;
        }
        
        Organization donarManagerOrganization = null;
        for(Organization o : donorEnterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof DonarManagerOrganization){
                donarManagerOrganization = o;
            }           
        }
        if(donarManagerOrganization == null){
            JOptionPane.showMessageDialog(null, "Donar Manager Organization Not Yet Created");
            return;
        }

       
        
        FoodPickUpRequest foodPickUpRequest = new FoodPickUpRequest();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            System.out.println(dtm);
            String foodItem = (String) dtm.getValueAt(i, 0);
            int quantity = (Integer) dtm.getValueAt(i, 1);
          //  int hours = (Integer) dtm.getValueAt(i, 2);

            FoodItem fi = new FoodItem(foodItem, quantity, donorEnterprise.getName());
            foodPickUpRequest.getFoodItemList().add(fi);           
            
        }
        
        foodPickUpRequest.setRequestDate(new Date());
        foodPickUpRequest.setStatus("Pickup Request Raised");
        foodPickUpRequest.setSender(donarStaffAccount);
        foodPickUpRequest.setPickupLocation(donorEnterprise.getAddress());
        foodPickUpRequest.setDonorEnterprise(donorEnterprise.getName());
        
        donarManagerOrganization.getWorkQueue().getWorkRequestList().add(foodPickUpRequest);       
        donarStaffAccount.getWorkQueue().getWorkRequestList().add(foodPickUpRequest);
        
        JOptionPane.showMessageDialog(null, "Pickup Request Raised");
        
        dtm.setRowCount(0);
        
       
       
    }//GEN-LAST:event_btnRaiseCollectionRequestActionPerformed

    private void addFoodItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodItemActionPerformed
        // TODO add your handling code here:
      
        String foodItem = foodItemName.getSelectedItem().toString();
        int quantity = (Integer) foodQuantity.getValue();
        
       if(quantity == 0 || quantity<0){
          JOptionPane.showMessageDialog(null, "Quantity cannot be 0 or negative!");
          return;
       }
          
           DefaultTableModel dtmi = (DefaultTableModel) foodItemTable.getModel();
         
           for (int i = 0; i < dtmi.getRowCount(); i++) {
          
            String foodItem1 = (String) dtmi.getValueAt(i, 0);
                  
            if(foodItem.equals(foodItem1)){
             JOptionPane.showMessageDialog(null, foodItem + " is already added");
             return;
            }
            
           }
        
        
    
        
       
        Object row[] = new Object[2];
        row[0] = foodItem;
        row[1] = quantity;
    

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        dtm.addRow(row);
    }//GEN-LAST:event_addFoodItemActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
         
        int selectedRow = foodItemTable.getSelectedRow();
        if (selectedRow < 0) {
            
            JOptionPane.showMessageDialog(null, "Please select an item to be removed");
            return;

        }
        
        
        dtm.removeRow(selectedRow);   
        
    }//GEN-LAST:event_jButton1ActionPerformed

   


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFoodItem;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRaiseCollectionRequest;
    private javax.swing.JComboBox<String> foodItemName;
    private javax.swing.JTable foodItemTable;
    private javax.swing.JSpinner foodQuantity;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
