/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DonarManager;

import Business.Food.FoodItem;
import Business.Food.FoodList;

import Business.WorkQueue.FoodPickUpRequest;
import Business.WorkQueue.WorkRequest;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayashree
 */
public class DonarManagerViewRequestDetailsandEditJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DonarManagerViewRequestDetailsandEditJPanel
     */
    private JPanel userProcessContainer;

    private FoodItem fi = null;
    private FoodPickUpRequest pr;

    public DonarManagerViewRequestDetailsandEditJPanel(JPanel userProcessContainer, FoodPickUpRequest pr) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.pr = pr;
        populateFoodItemListTable();
        disableFields(false);
    }

    private void populateFoodItemListTable() {

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        dtm.setRowCount(0);
    
        for (FoodItem item : pr.getFoodItemList()) {
            Object row[] = new Object[4];
            row[0] = item;
            row[1] = item.getQuantity();
            row[2] = Math.round(FoodList.getFoodInPounds().get(item.getFoodItemName()) * item.getQuantity() * 100.0) / 100.0;
         //   row[3] = item.getHoursToPerish();
            row[3] = FoodList.getFoodPrice().get(item.getFoodItemName()) * item.getQuantity();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        foodItemTable = new javax.swing.JTable();
        editUpdate = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        foodQuantity = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        foodItemName = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 140));

        foodItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Quantity", "Quantity in Pounds", "Worth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        foodItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foodItemTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(foodItemTable);

        editUpdate.setText("Edit");
        editUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUpdateActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantity:");

        jLabel4.setText("Food Item Name:");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel5.setText("Donar Manager Work Area - View Pick Up Request Details and Edit");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel2.setText("Food Items in Pickup Request Selected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editUpdate)
                            .addComponent(foodQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(1, 1, 1)
                        .addComponent(foodItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addGap(0, 67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(foodItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(foodQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editUpdate)
                .addGap(34, 34, 34)
                .addComponent(jButton3)
                .addContainerGap(185, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void disableFields(boolean b) {

        foodItemName.setEnabled(b);
        foodQuantity.setEnabled(b);
    //    hoursToPerish.setEnabled(b);

    }

    private void editUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUpdateActionPerformed
        // TODO add your handling code here:

          DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        int selectedIndex = foodItemTable.getSelectedRow();

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to edit");
            return;
        }
        
       
        
        if (editUpdate.getText().equals("Edit")) {
            disableFields(true);
            editUpdate.setText("Update");
        } else {
            disableFields(false);
            editUpdate.setText("Edit");
            String foodItem = foodItemName.getSelectedItem().toString();
            int quantity = (Integer) foodQuantity.getValue();
         //   int hours = (Integer) hoursToPerish.getValue();
         
       if(quantity == 0 || quantity<0){
          JOptionPane.showMessageDialog(null, "Quantity cannot be 0 or negative!");
          return;
       }
         
            fi.setFoodItemName(foodItem);
        //    fi.setHoursToPerish(hours);
            fi.setQuantity(quantity);
            populateFoodItemListTable();

        }


    }//GEN-LAST:event_editUpdateActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void populateFoodItemComboBox() {
        foodItemName.removeAllItems();

        for (String s : FoodList.getFoodInPounds().keySet()) {
            foodItemName.addItem(s);

        }

    }

    private void foodItemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foodItemTableMouseClicked
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        int selectedRowIndex = foodItemTable.getSelectedRow();
        fi = (FoodItem) dtm.getValueAt(selectedRowIndex, 0);

        populateFoodItemComboBox();

        foodItemName.setSelectedItem(fi.getFoodItemName());
        foodQuantity.setValue(fi.getQuantity());
    //   hoursToPerish.setValue(fi.getHoursToPerish());

    }//GEN-LAST:event_foodItemTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editUpdate;
    private javax.swing.JComboBox<String> foodItemName;
    private javax.swing.JTable foodItemTable;
    private javax.swing.JSpinner foodQuantity;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
