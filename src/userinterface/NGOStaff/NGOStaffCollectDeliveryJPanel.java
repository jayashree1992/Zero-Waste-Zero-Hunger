/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGOStaff;

import Business.Enterprise.Enterprise;
import Business.Food.FoodItem;
import Business.Food.FoodList;
import Business.Organization.NGOTestingOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DeliveryRequest;
import Business.WorkQueue.TestingRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayashree
 */
public class NGOStaffCollectDeliveryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NGOStaffCollectDeliveryJPanel
     */
    private JPanel userProcessContainer;

    private Organization organization;
    private UserAccount account;
    private Enterprise enterprise;

    public NGOStaffCollectDeliveryJPanel(JPanel userProcessContainer, Organization organization, UserAccount account, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.account = account;
        this.enterprise = enterprise;
        populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DeliveryDetailsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        foodItemTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 140));

        DeliveryDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Status", "Donar", "Delivery Person", "Delivery Enterprise"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DeliveryDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeliveryDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DeliveryDetailsTable);

        jButton1.setText("Collect and send for Testing");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        foodItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Quantity", "Quantity in Pounds", "Worth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(foodItemTable);

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel5.setText("NGO Staff Work Area - Collected Delivery");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel6.setText("Deliveries to be collected");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel7.setText("FoodItem in the selected delivery");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jButton2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))))
                .addGap(0, 272, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton2)
                .addContainerGap(152, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

       DefaultTableModel dtm = (DefaultTableModel) DeliveryDetailsTable.getModel();
        
       DefaultTableModel dtmi = (DefaultTableModel) foodItemTable.getModel();

        int selectedRowIndex = DeliveryDetailsTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request to collect and send");
            return;
        }

        DeliveryRequest dr = (DeliveryRequest) dtm.getValueAt(selectedRowIndex, 0);
     
        dr.setReceiver(account);
        dr.setSentForTesting(true);

        Organization ngoTestingOrganization = null;

        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {

            if (o instanceof NGOTestingOrganization) {

                ngoTestingOrganization = o;

            }

        }

        if (ngoTestingOrganization == null) {
            JOptionPane.showMessageDialog(null, "NGO Testing Organization is not yet created");
            return;
        }

        
        TestingRequest testingRequest = new TestingRequest();
        testingRequest.setStatus("Testing Pending");
        testingRequest.setSender(account);
        testingRequest.setRequestDate(new Date());
        testingRequest.setFoodPackage(dr.getPickupRequest());

        ngoTestingOrganization.getWorkQueue().getWorkRequestList().add(testingRequest);

        populateTable();
        dtmi.setRowCount(0);
        
        JOptionPane.showMessageDialog(null, "Items collected and sent for testing");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void DeliveryDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeliveryDetailsTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) DeliveryDetailsTable.getModel();
        int selectedRowIndex = DeliveryDetailsTable.getSelectedRow();
        DeliveryRequest dr = (DeliveryRequest) dtm.getValueAt(selectedRowIndex, 0);

        populateFoodItemListTable(dr);


    }//GEN-LAST:event_DeliveryDetailsTableMouseClicked

    private void populateFoodItemListTable(DeliveryRequest dr) {

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        dtm.setRowCount(0);
        for (FoodItem item : dr.getPickupRequest().getFoodItemList()) {
            Object row[] = new Object[4];
            row[0] = item;
            row[1] = item.getQuantity();
            row[2] = Math.round(FoodList.getFoodInPounds().get(item.getFoodItemName()) * item.getQuantity() * 100.0) / 100.0;
           // row[3] = item.getHoursToPerish();
            row[3] = FoodList.getFoodPrice().get(item.getFoodItemName()) * item.getQuantity();
            dtm.addRow(row);
        }
    }

    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) DeliveryDetailsTable.getModel();

        dtm.setRowCount(0);

        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {

            DeliveryRequest dr = (DeliveryRequest) wr;

            if (!dr.isSentForTesting()) {

                Object row[] = new Object[4];
                row[0] = dr;
                row[1] = dr.getDonorEnterprise();
                row[2] = dr.getDeliveryPerson().getEmployee().getName();
                row[3] = dr.getDeliveryEnterprise();
                
                
                dtm.addRow(row);
            }

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DeliveryDetailsTable;
    private javax.swing.JTable foodItemTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
