/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGOManager;

import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Food.FoodItem;
import Business.Inventory.Packet;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author jayashree
 */
public class NGOManagerViewAllInventory extends javax.swing.JPanel {

    /**
     * Creates new form NGOManagerViewAllInventory
     */
    
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    double totalEdible = 0.0d;
    double totalWaste = 0.0d;
    double totalDistributed = 0.0d;
    
    public NGOManagerViewAllInventory(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        populateEdibleInventoryTable();
        populateWasteInventoryTable();
        populateDistributedInventoryTable();
        displayChart();
    }
    
    private void displayChart(){
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(totalEdible, "Edible", "Inventory");
        dataset.setValue(totalWaste, "Waste", "Inventory");
        dataset.setValue(totalDistributed, "Distributed", "Inventory");
        JFreeChart chart = ChartFactory.createBarChart("Inventory", "", "Food in Pounds", dataset, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanel = new ChartPanel(chart);
 
        inventoryGraph.removeAll();
        inventoryGraph.add(chartPanel, BorderLayout.CENTER);
        inventoryGraph.validate();
    }

    private void populateEdibleInventoryTable(){
        NGOEnterprise  ngoEnterprise = (NGOEnterprise) enterprise;
        
         DefaultTableModel dtm = (DefaultTableModel) EdibleInventory.getModel();
         
        for (FoodItem fi : ngoEnterprise.getInventory().getEdibleInventory()){
                totalEdible += fi.getInPounds();
                Object row[] = new Object[2];
                row[0] = fi.getFoodItemName();
                row[1] = fi.getQuantity();
                dtm.addRow(row);
        }
    }
    
    private void  populateWasteInventoryTable(){
          NGOEnterprise  ngoEnterprise = (NGOEnterprise) enterprise;
        
         DefaultTableModel dtm = (DefaultTableModel) WasteInventory.getModel();
         
        for (FoodItem fi : ngoEnterprise.getInventory().getWasteInventory()){
                totalWaste += fi.getInPounds();
                Object row[] = new Object[2];
                row[0] = fi.getFoodItemName();
                row[1] = fi.getQuantity();
                dtm.addRow(row);
        }
    }
    
    private void populateDistributedInventoryTable(){
          NGOEnterprise  ngoEnterprise = (NGOEnterprise) enterprise;
        
         DefaultTableModel dtm = (DefaultTableModel) DistribuedInventory.getModel();
         
        for (Packet p : ngoEnterprise.getInventory().getDistributedInventory()){
                totalDistributed += p.getFoodItem().getInPounds();
                Object row[] = new Object[2];
                row[0] = p.getFoodItem().getFoodItemName();
                row[1] = p.getFoodItem().getQuantity();
                dtm.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        EdibleInventory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        WasteInventory = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        DistribuedInventory = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        inventoryGraph = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 228, 140));

        EdibleInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Item Name", "Quantity (in numbers)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(EdibleInventory);

        WasteInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Item Name", "Quantity (in numbers)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(WasteInventory);

        DistribuedInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Item Name", "Quantity (in numbers)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(DistribuedInventory);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel5.setText("NGO Manager Work Area - View all Inventory");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel6.setText("Edible Inventory");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel7.setText("Waste Inventory");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel8.setText("Distributed Inventory");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        inventoryGraph.setBackground(new java.awt.Color(255, 255, 204));
        inventoryGraph.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addComponent(inventoryGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(inventoryGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(53, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DistribuedInventory;
    private javax.swing.JTable EdibleInventory;
    private javax.swing.JTable WasteInventory;
    private javax.swing.JButton btnBack;
    private javax.swing.JPanel inventoryGraph;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
