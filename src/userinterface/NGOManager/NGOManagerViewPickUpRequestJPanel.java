/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGOManager;

import Business.Enterprise.DeliveryEnterprise;
import Business.Enterprise.Enterprise;
import Business.Food.FoodItem;
import Business.Food.FoodList;
import Business.Network.Network;
import Business.Organization.DeliveryManagerOrganization;
import Business.Organization.NGOManagerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Utility.EmailSender;
import Business.WorkQueue.DeliveryRequest;
import Business.WorkQueue.FoodPickUpRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jayashree
 */
public class NGOManagerViewPickUpRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NGOManagerViewPickUpRequestJPanel
     */
    private JPanel userProcessContainer;
    private Organization ngoManagerOrganization;
    private Enterprise ngoEnterprise;
    private Network network;
    private UserAccount ngoManagerUserAccount;

    public NGOManagerViewPickUpRequestJPanel(JPanel userProcessContainer, Organization ngoManagerOrganization, Enterprise ngoEnterprise, Network network, UserAccount ngoManagerUserAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ngoManagerOrganization = ngoManagerOrganization;
        this.ngoEnterprise = ngoEnterprise;
        this.network = network;
        this.ngoManagerUserAccount = ngoManagerUserAccount;
        populateTable();
        populateDeliveryEnterpriseComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        viewPickUpRequestTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        deliveryEnterpriseComboBox = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        foodItemTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 228, 140));

        viewPickUpRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Request Date", "Donar Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewPickUpRequestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewPickUpRequestTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(viewPickUpRequestTable);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Assign Delivery");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("**Select a request to view it's food items**");

        foodItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Quantity", "Quantity in Pounds", "Worth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(foodItemTable);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel5.setText("NGO Manager Work Area - View Pickup Requests");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel4.setText("Pickup Requests Received");

        jLabel6.setText("List of Delivery Enterprise:");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel7.setText("FoodItems in the selected request");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deliveryEnterpriseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jButton1)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane3))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(deliveryEnterpriseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(38, 38, 38)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void populateTable() {

        if (ngoManagerOrganization instanceof NGOManagerOrganization) {
            DefaultTableModel dtm = (DefaultTableModel) viewPickUpRequestTable.getModel();
            dtm.setRowCount(0);
            for (WorkRequest wr : ngoManagerOrganization.getWorkQueue().getWorkRequestList()) {
                if (wr instanceof FoodPickUpRequest) {
                    FoodPickUpRequest pr = (FoodPickUpRequest) wr;
                    Object row[] = new Object[3];
                    row[0] = wr;
                    row[1] = wr.getRequestDate();
                   
                    row[2] = pr.getDonorEnterprise();
                    dtm.addRow(row);
                }

            }
        }

    }

    private void populateDeliveryEnterpriseComboBox() {
        deliveryEnterpriseComboBox.removeAllItems();
        System.out.print(network);
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e instanceof DeliveryEnterprise) {
                deliveryEnterpriseComboBox.addItem(e);
            }
        }

    }

    private void populateFoodItemListTable(FoodPickUpRequest pr) {

        DefaultTableModel dtm = (DefaultTableModel) foodItemTable.getModel();
        dtm.setRowCount(0);
        for (FoodItem item : pr.getFoodItemList()) {
            Object row[] = new Object[4];
            row[0] = item;
            row[1] = item.getQuantity();
            row[2] = Math.round(FoodList.getFoodInPounds().get(item.getFoodItemName()) * item.getQuantity() * 100.0) / 100.0;
            // row[3] = item.getHoursToPerish();
            row[3] = FoodList.getFoodPrice().get(item.getFoodItemName()) * item.getQuantity();
            dtm.addRow(row);
        }
    }
    private void viewPickUpRequestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewPickUpRequestTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) viewPickUpRequestTable.getModel();
        int selectedRowIndex = viewPickUpRequestTable.getSelectedRow();
        FoodPickUpRequest pr = (FoodPickUpRequest) dtm.getValueAt(selectedRowIndex, 0);

        populateFoodItemListTable(pr);
    }//GEN-LAST:event_viewPickUpRequestTableMouseClicked


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) viewPickUpRequestTable.getModel();

        int selectedRowIndex = viewPickUpRequestTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Select a request for delivery");
            return;
        }

        WorkRequest wr = (WorkRequest) dtm.getValueAt(selectedRowIndex, 0);
        FoodPickUpRequest pr = (FoodPickUpRequest) wr;

        if (!wr.getStatus().equals("Forwarded to NGO")) {
            JOptionPane.showMessageDialog(null, "Request already sent for delivery");
            return;
        }

        Enterprise deliverManagerEnterprise = (DeliveryEnterprise) deliveryEnterpriseComboBox.getSelectedItem();
        if (deliverManagerEnterprise == null) {
            JOptionPane.showMessageDialog(null, "Select a delivery Enterprise");
            return;
        }

        Organization deliveryManagerOrganization = null;
        for (Organization o : deliverManagerEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof DeliveryManagerOrganization) {
                deliveryManagerOrganization = o;
            }
        }
        
        if (deliveryManagerOrganization == null) {
            JOptionPane.showMessageDialog(null, "Delivery Manager Organization Not Yet Created");
            return;
        }

        DeliveryRequest deliveryRequest = new DeliveryRequest();
        deliveryRequest.setPickupRequest(pr);
        deliveryRequest.setSender(ngoManagerUserAccount);
        deliveryRequest.setRequestDate(new Date());
        deliveryRequest.setStatus("Delivery Requested");
        deliveryRequest.setPickupLocation(pr.getPickupLocation());
        deliveryRequest.setDropOffLocation(ngoEnterprise.getAddress());
        deliveryRequest.setDonorEnterprise(pr.getDonorEnterprise());
        deliveryRequest.setNgoEnterprise(ngoEnterprise.getName());

        wr.setStatus("Delivery Requested");
        deliveryManagerOrganization.getWorkQueue().getWorkRequestList().add(deliveryRequest);

        populateTable();
        JOptionPane.showMessageDialog(null, "Delivery Request sent to Delivery Enterprise " + deliverManagerEnterprise);
        EmailSender.sendEmail("patel.jaya@husky.neu.edu", ngoManagerUserAccount.getEmployee().getName(), "Delivery Requested to " + deliverManagerEnterprise);

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox deliveryEnterpriseComboBox;
    private javax.swing.JTable foodItemTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable viewPickUpRequestTable;
    // End of variables declaration//GEN-END:variables
}
